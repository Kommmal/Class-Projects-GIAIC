# -*- coding: utf-8 -*-
"""02_lists.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17suW_ZyhfTBZ08o7Hy39PrqTkZaADCNo
"""

# Write a function that takes a list of numbers and returns the sum of those numbers.

def sum_of_numbers(numbers: list) -> int:
  total = 0
  for num in numbers:
    total += num
  return total

def main():
    list_of_numbers: list = [1,2,3,4,5]
    total_sum: int = sum_of_numbers(list_of_numbers)
    print(total_sum)

if __name__ == '__main__':
    main()

# Write a program that doubles each element in a list of numbers. For example, if you start with this list:

# numbers = [1, 2, 3, 4]

# You should end with this list:

# numbers = [2, 4, 6, 8]

def main():
    numbers: list = [1, 2, 3, 4]

    for i in range(len(numbers)):
      numbers[i] = numbers[i] * 2

    print(numbers)


if __name__ == '__main__':
    main()

# In the information flow lesson, we discussed using a variable storing a number as an example of scope. We saw that changes we made to the number inside a function did not stay unless we returned it. This is true for what we call immutable data types which include things like numbers and strings.

# However, there are also mutable data types where changes stay even if we don't return anything. Some examples of mutable data types are lists and dictionaries. This means that you should be mindful when modifying lists and dictionaries within helper functions since their changes stay whether or not you return them.

# To see this in action, fill out the add_three_copies(...) function which takes a list and some data and then adds three copies of the data to the list. Don't return anything and see what happens! Compare this process to the x = change(x) example and note the differences.

# Here is an example run of this program (user input in bold italics):

# Enter a message to copy: Hello world!

# List before: []

# List after: ['Hello world!', 'Hello world!', 'Hello world!']

# (Note. The concept of immutable/mutable data types is called mutability. Be careful because different programming languages have different rules regarding mutability!)


def add_three_copies(list, data):
  for i in range(3):
    list.append(data)

def main():
    message: str = input("Enter a message to copy: ")
    messages: list = []
    print("List before:", messages)
    add_three_copies(messages, message)
    print("List after:", messages)


if __name__ == '__main__':
    main()

# Fill out the function get_first_element(lst) which takes in a list lst as a parameter and prints the first element in the list. The list is guaranteed to be non-empty. We've written some code for you which prompts the user to input the list one element at a time.


def get_first_element(lst):
    print("The first element is:", lst[0])

num_elements = int(input("How many elements in the list? "))

user_list = []

for i in range(num_elements):
    element = input(f"Enter element {i + 1}: ")
    user_list.append(element)

get_first_element(user_list)

# Fill out the function get_first_element(lst) which takes in a list lst as a parameter and prints the first element in the list. The list is guaranteed to be non-empty. We've written some code for you which prompts the user to input the list one element at a time.


def get_last_element(lst):
    print("The last element is:", lst[-1])

num_elements = int(input("How many elements in the list? "))

user_list = []

for i in range(num_elements):
    element = input(f"Enter element {i + 1}: ")
    user_list.append(element)

get_last_element(user_list)

def main():
    values:list = []

    while True:
        value = input("Enter a value: ")
        if value == "":
            break  # Exit the loop when the input is empty
        values.append(value)

    print("Here's the list:", values)

if __name__ == '__main__':
    main()

# Fill out the function shorten(lst) which removes elements from the end of lst, which is a list, and prints each item it removes until lst is MAX_LENGTH items long. If lst is already shorter than MAX_LENGTH you should leave it unchanged. We've written a main() function for you which gets a list and passes it into your function once you run the program. For the autograder to pass you will need MAX_LENGTH to be 3, but feel free to change it around to test your program.


MAX_LENGTH = 3

def shorten(lst):
   while len(lst) > MAX_LENGTH:
    removed = lst.pop()
    print(f"Removed: {removed}")

def main():
    user_input = input("Enter list items separated by commas: ")
    lst = user_input.split(",")
    lst = [item.strip() for item in lst]
    print("Original list:", lst)

    shorten(lst)

    print("Final list:", lst)

if __name__ == '__main__':
    main()